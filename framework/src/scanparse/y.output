Useless nonterminals

   exprstmt


Terminals which are not used

   NEG
   INTTYPE
   FLOATTYPE
   BOOLTYPE
   "cast"


Useless rules

  111 exprstmt: expr


State 105 conflicts: 14 shift/reduce
State 167 conflicts: 13 shift/reduce
State 204 conflicts: 1 shift/reduce
State 210 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decls

    2 decls: decl
    3      | decl decls

    4 decl: fundef
    5     | globdef
    6     | globdecl

    7 globdecl: EXTERN type ID COMMA ids SEMICOLON
    8         | EXTERN type ID SEMICOLON

    9 globdef: EXPORT type ID LET expr COMMA exprs SEMICOLON
   10        | EXPORT type ID LET expr SEMICOLON
   11        | EXPORT type ID SEMICOLON
   12        | type ID LET expr COMMA exprs SEMICOLON
   13        | type ID LET expr SEMICOLON
   14        | type ID SEMICOLON

   15 fundef: EXPORT type ID BRACKET_L BRACKET_R funbody
   16       | EXPORT type ID BRACKET_L param BRACKET_R funbody
   17       | type ID BRACKET_L BRACKET_R funbody
   18       | type ID BRACKET_L param BRACKET_R funbody
   19       | EXTERN type ID BRACKET_L BRACKET_R SEMICOLON
   20       | EXTERN type ID BRACKET_L param BRACKET_R SEMICOLON

   21 param: type ID ids param
   22      | type ID ids
   23      | type ID COMMA param
   24      | type ID

   25 fundefs: fundef fundefs
   26        | fundef

   27 ids: ID ids
   28    | ID

   29 funbody: CURLY_BRACKET_L vardecl fundefs stmts CURLY_BRACKET_R
   30        | CURLY_BRACKET_L vardecl stmts fundefs CURLY_BRACKET_R
   31        | CURLY_BRACKET_L fundefs stmts CURLY_BRACKET_R
   32        | CURLY_BRACKET_L vardecl stmts CURLY_BRACKET_R
   33        | CURLY_BRACKET_L vardecl fundefs CURLY_BRACKET_R
   34        | CURLY_BRACKET_L stmts fundefs CURLY_BRACKET_R
   35        | CURLY_BRACKET_L vardecl CURLY_BRACKET_R
   36        | CURLY_BRACKET_L stmts CURLY_BRACKET_R
   37        | CURLY_BRACKET_L fundefs CURLY_BRACKET_R
   38        | CURLY_BRACKET_L CURLY_BRACKET_R

   39 vardecl: vardecl type ID LET expr SEMICOLON
   40        | type ID LET expr SEMICOLON
   41        | vardecl type ID SEMICOLON
   42        | type ID SEMICOLON

   43 stmts: stmt stmts
   44      | stmt

   45 stmt: assign
   46     | return
   47     | ifelse
   48     | for
   49     | dowhile
   50     | while
   51     | expr SEMICOLON

   52 return: RETURN expr SEMICOLON
   53       | RETURN SEMICOLON

   54 ifelse: IF BRACKET_L expr BRACKET_R block ELSE block
   55       | IF BRACKET_L expr BRACKET_R block
   56       | IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R ELSE CURLY_BRACKET_L CURLY_BRACKET_R
   57       | IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R ELSE block
   58       | IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   59       | IF BRACKET_L expr BRACKET_R ELSE block

   60 block: CURLY_BRACKET_L stmts CURLY_BRACKET_R
   61      | stmt

   62 assign: varlet LET expr SEMICOLON

   63 for: FOR BRACKET_L type ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   64    | FOR BRACKET_L type ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   65    | FOR BRACKET_L type ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   66    | FOR BRACKET_L type ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   67    | FOR BRACKET_L type ID LET expr COMMA expr COMMA expr BRACKET_R stmts
   68    | FOR BRACKET_L type ID LET expr COMMA expr BRACKET_R stmts

   69 dowhile: DO block WHILE BRACKET_L expr BRACKET_R SEMICOLON

   70 while: WHILE BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R

   71 varlet: ID

   72 expr: BRACKET_L expr BRACKET_R
   73     | expr PLUS expr
   74     | expr MINUS expr
   75     | expr STAR expr
   76     | expr SLASH expr
   77     | expr PERCENT expr
   78     | expr LE expr
   79     | expr LT expr
   80     | expr GE expr
   81     | expr GT expr
   82     | expr EQ expr
   83     | expr OR expr
   84     | expr AND expr
   85     | expr NE expr
   86     | MINUS expr
   87     | NOT expr
   88     | constant
   89     | var
   90     | cast
   91     | funcall
   92     | arrexpr

   93 cast: BRACKET_L type BRACKET_R expr

   94 var: ID

   95 funcall: ID BRACKET_L exprs BRACKET_R
   96        | ID BRACKET_L BRACKET_R

   97 arrexpr: SQUARE_BRACKET_L exprs SQUARE_BRACKET_R

   98 exprs: expr
   99      | expr COMMA exprs

  100 constant: floatval
  101         | intval
  102         | boolval

  103 floatval: FLOAT

  104 intval: NUM

  105 boolval: TRUEVAL
  106        | FALSEVAL

  107 type: INT_TYPE
  108     | FLOAT_TYPE
  109     | BOOL_TYPE
  110     | VOID_TYPE


Terminals, with rules where they appear

$end (0) 0
error (256)
INT_TYPE (258) 107
FLOAT_TYPE (259) 108
BOOL_TYPE (260) 109
VOID_TYPE (261) 110
BRACKET_L (262) 15 16 17 18 19 20 54 55 56 57 58 59 63 64 65 66 67
    68 69 70 72 93 95 96
BRACKET_R (263) 15 16 17 18 19 20 54 55 56 57 58 59 63 64 65 66 67
    68 69 70 72 93 95 96
COMMA (264) 7 9 12 23 63 64 65 66 67 68 99
SEMICOLON (265) 7 8 9 10 11 12 13 14 19 20 39 40 41 42 51 52 53 62
    69
MINUS (266) 74 86
PLUS (267) 73
STAR (268) 75
SLASH (269) 76
PERCENT (270) 77
LE (271) 78
LT (272) 79
GE (273) 80
GT (274) 81
EQ (275) 82
NE (276) 85
OR (277) 83
AND (278) 84
NOT (279) 87
NEG (280)
TRUEVAL (281) 105
FALSEVAL (282) 106
LET (283) 9 10 12 13 39 40 62 63 64 65 66 67 68
INTTYPE (284)
FLOATTYPE (285)
BOOLTYPE (286)
CURLY_BRACKET_L (287) 29 30 31 32 33 34 35 36 37 38 56 57 58 60 63
    64 65 66 70
CURLY_BRACKET_R (288) 29 30 31 32 33 34 35 36 37 38 56 57 58 60 63
    64 65 66 70
RETURN (289) 52 53
SQUARE_BRACKET_L (290) 97
SQUARE_BRACKET_R (291) 97
EXTERN (292) 7 8 19 20
EXPORT (293) 9 10 11 15 16
IF (294) 54 55 56 57 58 59
ELSE (295) 54 56 57 59
FOR (296) 63 64 65 66 67 68
DO (297) 69
WHILE (298) 69 70
"cast" (299)
NUM (300) 104
FLOAT (301) 103
ID (302) 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 27 28 39
    40 41 42 63 64 65 66 67 68 71 94 95 96


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program (49)
    on left: 1, on right: 0
decls (50)
    on left: 2 3, on right: 1 3
decl (51)
    on left: 4 5 6, on right: 2 3
globdecl (52)
    on left: 7 8, on right: 6
globdef (53)
    on left: 9 10 11 12 13 14, on right: 5
fundef (54)
    on left: 15 16 17 18 19 20, on right: 4 25 26
param (55)
    on left: 21 22 23 24, on right: 16 18 20 21 23
fundefs (56)
    on left: 25 26, on right: 25 29 30 31 33 34 37
ids (57)
    on left: 27 28, on right: 7 21 22 27
funbody (58)
    on left: 29 30 31 32 33 34 35 36 37 38, on right: 15 16 17 18
vardecl (59)
    on left: 39 40 41 42, on right: 29 30 32 33 35 39 41
stmts (60)
    on left: 43 44, on right: 29 30 31 32 34 36 43 60 65 66 67 68 70
stmt (61)
    on left: 45 46 47 48 49 50 51, on right: 43 44 61
return (62)
    on left: 52 53, on right: 46
ifelse (63)
    on left: 54 55 56 57 58 59, on right: 47
block (64)
    on left: 60 61, on right: 54 55 57 59 69
assign (65)
    on left: 62, on right: 45
for (66)
    on left: 63 64 65 66 67 68, on right: 48
dowhile (67)
    on left: 69, on right: 49
while (68)
    on left: 70, on right: 50
varlet (69)
    on left: 71, on right: 62
expr (70)
    on left: 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89
    90 91 92, on right: 9 10 12 13 39 40 51 52 54 55 56 57 58 59 62
    63 64 65 66 67 68 69 70 72 73 74 75 76 77 78 79 80 81 82 83 84
    85 86 87 93 98 99
cast (71)
    on left: 93, on right: 90
var (72)
    on left: 94, on right: 89
funcall (73)
    on left: 95 96, on right: 91
arrexpr (74)
    on left: 97, on right: 92
exprs (75)
    on left: 98 99, on right: 9 12 95 97 99
constant (76)
    on left: 100 101 102, on right: 88
floatval (77)
    on left: 103, on right: 100
intval (78)
    on left: 104, on right: 101
boolval (79)
    on left: 105 106, on right: 102
type (80)
    on left: 107 108 109 110, on right: 7 8 9 10 11 12 13 14 15 16
    17 18 19 20 21 22 23 24 39 40 41 42 63 64 65 66 67 68 93


state 0

    0 $accept: . program $end

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4
    EXTERN      shift, and go to state 5
    EXPORT      shift, and go to state 6

    program   go to state 7
    decls     go to state 8
    decl      go to state 9
    globdecl  go to state 10
    globdef   go to state 11
    fundef    go to state 12
    type      go to state 13


state 1

  107 type: INT_TYPE .

    $default  reduce using rule 107 (type)


state 2

  108 type: FLOAT_TYPE .

    $default  reduce using rule 108 (type)


state 3

  109 type: BOOL_TYPE .

    $default  reduce using rule 109 (type)


state 4

  110 type: VOID_TYPE .

    $default  reduce using rule 110 (type)


state 5

    7 globdecl: EXTERN . type ID COMMA ids SEMICOLON
    8         | EXTERN . type ID SEMICOLON
   19 fundef: EXTERN . type ID BRACKET_L BRACKET_R SEMICOLON
   20       | EXTERN . type ID BRACKET_L param BRACKET_R SEMICOLON

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4

    type  go to state 14


state 6

    9 globdef: EXPORT . type ID LET expr COMMA exprs SEMICOLON
   10        | EXPORT . type ID LET expr SEMICOLON
   11        | EXPORT . type ID SEMICOLON
   15 fundef: EXPORT . type ID BRACKET_L BRACKET_R funbody
   16       | EXPORT . type ID BRACKET_L param BRACKET_R funbody

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4

    type  go to state 15


state 7

    0 $accept: program . $end

    $end  shift, and go to state 16


state 8

    1 program: decls .

    $default  reduce using rule 1 (program)


state 9

    2 decls: decl .
    3      | decl . decls

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4
    EXTERN      shift, and go to state 5
    EXPORT      shift, and go to state 6

    $default  reduce using rule 2 (decls)

    decls     go to state 17
    decl      go to state 9
    globdecl  go to state 10
    globdef   go to state 11
    fundef    go to state 12
    type      go to state 13


state 10

    6 decl: globdecl .

    $default  reduce using rule 6 (decl)


state 11

    5 decl: globdef .

    $default  reduce using rule 5 (decl)


state 12

    4 decl: fundef .

    $default  reduce using rule 4 (decl)


state 13

   12 globdef: type . ID LET expr COMMA exprs SEMICOLON
   13        | type . ID LET expr SEMICOLON
   14        | type . ID SEMICOLON
   17 fundef: type . ID BRACKET_L BRACKET_R funbody
   18       | type . ID BRACKET_L param BRACKET_R funbody

    ID  shift, and go to state 18


state 14

    7 globdecl: EXTERN type . ID COMMA ids SEMICOLON
    8         | EXTERN type . ID SEMICOLON
   19 fundef: EXTERN type . ID BRACKET_L BRACKET_R SEMICOLON
   20       | EXTERN type . ID BRACKET_L param BRACKET_R SEMICOLON

    ID  shift, and go to state 19


state 15

    9 globdef: EXPORT type . ID LET expr COMMA exprs SEMICOLON
   10        | EXPORT type . ID LET expr SEMICOLON
   11        | EXPORT type . ID SEMICOLON
   15 fundef: EXPORT type . ID BRACKET_L BRACKET_R funbody
   16       | EXPORT type . ID BRACKET_L param BRACKET_R funbody

    ID  shift, and go to state 20


state 16

    0 $accept: program $end .

    $default  accept


state 17

    3 decls: decl decls .

    $default  reduce using rule 3 (decls)


state 18

   12 globdef: type ID . LET expr COMMA exprs SEMICOLON
   13        | type ID . LET expr SEMICOLON
   14        | type ID . SEMICOLON
   17 fundef: type ID . BRACKET_L BRACKET_R funbody
   18       | type ID . BRACKET_L param BRACKET_R funbody

    BRACKET_L  shift, and go to state 21
    SEMICOLON  shift, and go to state 22
    LET        shift, and go to state 23


state 19

    7 globdecl: EXTERN type ID . COMMA ids SEMICOLON
    8         | EXTERN type ID . SEMICOLON
   19 fundef: EXTERN type ID . BRACKET_L BRACKET_R SEMICOLON
   20       | EXTERN type ID . BRACKET_L param BRACKET_R SEMICOLON

    BRACKET_L  shift, and go to state 24
    COMMA      shift, and go to state 25
    SEMICOLON  shift, and go to state 26


state 20

    9 globdef: EXPORT type ID . LET expr COMMA exprs SEMICOLON
   10        | EXPORT type ID . LET expr SEMICOLON
   11        | EXPORT type ID . SEMICOLON
   15 fundef: EXPORT type ID . BRACKET_L BRACKET_R funbody
   16       | EXPORT type ID . BRACKET_L param BRACKET_R funbody

    BRACKET_L  shift, and go to state 27
    SEMICOLON  shift, and go to state 28
    LET        shift, and go to state 29


state 21

   17 fundef: type ID BRACKET_L . BRACKET_R funbody
   18       | type ID BRACKET_L . param BRACKET_R funbody

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4
    BRACKET_R   shift, and go to state 30

    param  go to state 31
    type   go to state 32


state 22

   14 globdef: type ID SEMICOLON .

    $default  reduce using rule 14 (globdef)


state 23

   12 globdef: type ID LET . expr COMMA exprs SEMICOLON
   13        | type ID LET . expr SEMICOLON

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 42
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 24

   19 fundef: EXTERN type ID BRACKET_L . BRACKET_R SEMICOLON
   20       | EXTERN type ID BRACKET_L . param BRACKET_R SEMICOLON

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4
    BRACKET_R   shift, and go to state 51

    param  go to state 52
    type   go to state 32


state 25

    7 globdecl: EXTERN type ID COMMA . ids SEMICOLON

    ID  shift, and go to state 53

    ids  go to state 54


state 26

    8 globdecl: EXTERN type ID SEMICOLON .

    $default  reduce using rule 8 (globdecl)


state 27

   15 fundef: EXPORT type ID BRACKET_L . BRACKET_R funbody
   16       | EXPORT type ID BRACKET_L . param BRACKET_R funbody

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4
    BRACKET_R   shift, and go to state 55

    param  go to state 56
    type   go to state 32


state 28

   11 globdef: EXPORT type ID SEMICOLON .

    $default  reduce using rule 11 (globdef)


state 29

    9 globdef: EXPORT type ID LET . expr COMMA exprs SEMICOLON
   10        | EXPORT type ID LET . expr SEMICOLON

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 57
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 30

   17 fundef: type ID BRACKET_L BRACKET_R . funbody

    CURLY_BRACKET_L  shift, and go to state 58

    funbody  go to state 59


state 31

   18 fundef: type ID BRACKET_L param . BRACKET_R funbody

    BRACKET_R  shift, and go to state 60


state 32

   21 param: type . ID ids param
   22      | type . ID ids
   23      | type . ID COMMA param
   24      | type . ID

    ID  shift, and go to state 61


state 33

   72 expr: BRACKET_L . expr BRACKET_R
   93 cast: BRACKET_L . type BRACKET_R expr

    INT_TYPE          shift, and go to state 1
    FLOAT_TYPE        shift, and go to state 2
    BOOL_TYPE         shift, and go to state 3
    VOID_TYPE         shift, and go to state 4
    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 62
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50
    type      go to state 63


state 34

   86 expr: MINUS . expr

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 64
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 35

   87 expr: NOT . expr

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 65
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 36

  105 boolval: TRUEVAL .

    $default  reduce using rule 105 (boolval)


state 37

  106 boolval: FALSEVAL .

    $default  reduce using rule 106 (boolval)


state 38

   97 arrexpr: SQUARE_BRACKET_L . exprs SQUARE_BRACKET_R

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 66
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    exprs     go to state 67
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 39

  104 intval: NUM .

    $default  reduce using rule 104 (intval)


state 40

  103 floatval: FLOAT .

    $default  reduce using rule 103 (floatval)


state 41

   94 var: ID .
   95 funcall: ID . BRACKET_L exprs BRACKET_R
   96        | ID . BRACKET_L BRACKET_R

    BRACKET_L  shift, and go to state 68

    $default  reduce using rule 94 (var)


state 42

   12 globdef: type ID LET expr . COMMA exprs SEMICOLON
   13        | type ID LET expr . SEMICOLON
   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    COMMA      shift, and go to state 69
    SEMICOLON  shift, and go to state 70
    MINUS      shift, and go to state 71
    PLUS       shift, and go to state 72
    STAR       shift, and go to state 73
    SLASH      shift, and go to state 74
    PERCENT    shift, and go to state 75
    LE         shift, and go to state 76
    LT         shift, and go to state 77
    GE         shift, and go to state 78
    GT         shift, and go to state 79
    EQ         shift, and go to state 80
    NE         shift, and go to state 81
    OR         shift, and go to state 82
    AND        shift, and go to state 83


state 43

   90 expr: cast .

    $default  reduce using rule 90 (expr)


state 44

   89 expr: var .

    $default  reduce using rule 89 (expr)


state 45

   91 expr: funcall .

    $default  reduce using rule 91 (expr)


state 46

   92 expr: arrexpr .

    $default  reduce using rule 92 (expr)


state 47

   88 expr: constant .

    $default  reduce using rule 88 (expr)


state 48

  100 constant: floatval .

    $default  reduce using rule 100 (constant)


state 49

  101 constant: intval .

    $default  reduce using rule 101 (constant)


state 50

  102 constant: boolval .

    $default  reduce using rule 102 (constant)


state 51

   19 fundef: EXTERN type ID BRACKET_L BRACKET_R . SEMICOLON

    SEMICOLON  shift, and go to state 84


state 52

   20 fundef: EXTERN type ID BRACKET_L param . BRACKET_R SEMICOLON

    BRACKET_R  shift, and go to state 85


state 53

   27 ids: ID . ids
   28    | ID .

    ID  shift, and go to state 53

    $default  reduce using rule 28 (ids)

    ids  go to state 86


state 54

    7 globdecl: EXTERN type ID COMMA ids . SEMICOLON

    SEMICOLON  shift, and go to state 87


state 55

   15 fundef: EXPORT type ID BRACKET_L BRACKET_R . funbody

    CURLY_BRACKET_L  shift, and go to state 58

    funbody  go to state 88


state 56

   16 fundef: EXPORT type ID BRACKET_L param . BRACKET_R funbody

    BRACKET_R  shift, and go to state 89


state 57

    9 globdef: EXPORT type ID LET expr . COMMA exprs SEMICOLON
   10        | EXPORT type ID LET expr . SEMICOLON
   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    COMMA      shift, and go to state 90
    SEMICOLON  shift, and go to state 91
    MINUS      shift, and go to state 71
    PLUS       shift, and go to state 72
    STAR       shift, and go to state 73
    SLASH      shift, and go to state 74
    PERCENT    shift, and go to state 75
    LE         shift, and go to state 76
    LT         shift, and go to state 77
    GE         shift, and go to state 78
    GT         shift, and go to state 79
    EQ         shift, and go to state 80
    NE         shift, and go to state 81
    OR         shift, and go to state 82
    AND        shift, and go to state 83


state 58

   29 funbody: CURLY_BRACKET_L . vardecl fundefs stmts CURLY_BRACKET_R
   30        | CURLY_BRACKET_L . vardecl stmts fundefs CURLY_BRACKET_R
   31        | CURLY_BRACKET_L . fundefs stmts CURLY_BRACKET_R
   32        | CURLY_BRACKET_L . vardecl stmts CURLY_BRACKET_R
   33        | CURLY_BRACKET_L . vardecl fundefs CURLY_BRACKET_R
   34        | CURLY_BRACKET_L . stmts fundefs CURLY_BRACKET_R
   35        | CURLY_BRACKET_L . vardecl CURLY_BRACKET_R
   36        | CURLY_BRACKET_L . stmts CURLY_BRACKET_R
   37        | CURLY_BRACKET_L . fundefs CURLY_BRACKET_R
   38        | CURLY_BRACKET_L . CURLY_BRACKET_R

    INT_TYPE          shift, and go to state 1
    FLOAT_TYPE        shift, and go to state 2
    BOOL_TYPE         shift, and go to state 3
    VOID_TYPE         shift, and go to state 4
    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    CURLY_BRACKET_R   shift, and go to state 92
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    EXTERN            shift, and go to state 94
    EXPORT            shift, and go to state 95
    IF                shift, and go to state 96
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    fundef    go to state 101
    fundefs   go to state 102
    vardecl   go to state 103
    stmts     go to state 104
    stmt      go to state 105
    return    go to state 106
    ifelse    go to state 107
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50
    type      go to state 114


state 59

   17 fundef: type ID BRACKET_L BRACKET_R funbody .

    $default  reduce using rule 17 (fundef)


state 60

   18 fundef: type ID BRACKET_L param BRACKET_R . funbody

    CURLY_BRACKET_L  shift, and go to state 58

    funbody  go to state 115


state 61

   21 param: type ID . ids param
   22      | type ID . ids
   23      | type ID . COMMA param
   24      | type ID .

    COMMA  shift, and go to state 116
    ID     shift, and go to state 53

    $default  reduce using rule 24 (param)

    ids  go to state 117


state 62

   72 expr: BRACKET_L expr . BRACKET_R
   73     | expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    BRACKET_R  shift, and go to state 118
    MINUS      shift, and go to state 71
    PLUS       shift, and go to state 72
    STAR       shift, and go to state 73
    SLASH      shift, and go to state 74
    PERCENT    shift, and go to state 75
    LE         shift, and go to state 76
    LT         shift, and go to state 77
    GE         shift, and go to state 78
    GT         shift, and go to state 79
    EQ         shift, and go to state 80
    NE         shift, and go to state 81
    OR         shift, and go to state 82
    AND        shift, and go to state 83


state 63

   93 cast: BRACKET_L type . BRACKET_R expr

    BRACKET_R  shift, and go to state 119


state 64

   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr
   86     | MINUS expr .

    STAR     shift, and go to state 73
    SLASH    shift, and go to state 74
    PERCENT  shift, and go to state 75

    $default  reduce using rule 86 (expr)


state 65

   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr
   87     | NOT expr .

    $default  reduce using rule 87 (expr)


state 66

   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr
   98 exprs: expr .
   99      | expr . COMMA exprs

    COMMA    shift, and go to state 120
    MINUS    shift, and go to state 71
    PLUS     shift, and go to state 72
    STAR     shift, and go to state 73
    SLASH    shift, and go to state 74
    PERCENT  shift, and go to state 75
    LE       shift, and go to state 76
    LT       shift, and go to state 77
    GE       shift, and go to state 78
    GT       shift, and go to state 79
    EQ       shift, and go to state 80
    NE       shift, and go to state 81
    OR       shift, and go to state 82
    AND      shift, and go to state 83

    $default  reduce using rule 98 (exprs)


state 67

   97 arrexpr: SQUARE_BRACKET_L exprs . SQUARE_BRACKET_R

    SQUARE_BRACKET_R  shift, and go to state 121


state 68

   95 funcall: ID BRACKET_L . exprs BRACKET_R
   96        | ID BRACKET_L . BRACKET_R

    BRACKET_L         shift, and go to state 33
    BRACKET_R         shift, and go to state 122
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 66
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    exprs     go to state 123
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 69

   12 globdef: type ID LET expr COMMA . exprs SEMICOLON

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 66
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    exprs     go to state 124
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 70

   13 globdef: type ID LET expr SEMICOLON .

    $default  reduce using rule 13 (globdef)


state 71

   74 expr: expr MINUS . expr

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 125
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 72

   73 expr: expr PLUS . expr

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 126
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 73

   75 expr: expr STAR . expr

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 127
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 74

   76 expr: expr SLASH . expr

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 128
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 75

   77 expr: expr PERCENT . expr

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 129
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 76

   78 expr: expr LE . expr

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 130
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 77

   79 expr: expr LT . expr

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 131
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 78

   80 expr: expr GE . expr

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 132
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 79

   81 expr: expr GT . expr

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 133
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 80

   82 expr: expr EQ . expr

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 134
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 81

   85 expr: expr NE . expr

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 135
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 82

   83 expr: expr OR . expr

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 136
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 83

   84 expr: expr AND . expr

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 137
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 84

   19 fundef: EXTERN type ID BRACKET_L BRACKET_R SEMICOLON .

    $default  reduce using rule 19 (fundef)


state 85

   20 fundef: EXTERN type ID BRACKET_L param BRACKET_R . SEMICOLON

    SEMICOLON  shift, and go to state 138


state 86

   27 ids: ID ids .

    $default  reduce using rule 27 (ids)


state 87

    7 globdecl: EXTERN type ID COMMA ids SEMICOLON .

    $default  reduce using rule 7 (globdecl)


state 88

   15 fundef: EXPORT type ID BRACKET_L BRACKET_R funbody .

    $default  reduce using rule 15 (fundef)


state 89

   16 fundef: EXPORT type ID BRACKET_L param BRACKET_R . funbody

    CURLY_BRACKET_L  shift, and go to state 58

    funbody  go to state 139


state 90

    9 globdef: EXPORT type ID LET expr COMMA . exprs SEMICOLON

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 66
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    exprs     go to state 140
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 91

   10 globdef: EXPORT type ID LET expr SEMICOLON .

    $default  reduce using rule 10 (globdef)


state 92

   38 funbody: CURLY_BRACKET_L CURLY_BRACKET_R .

    $default  reduce using rule 38 (funbody)


state 93

   52 return: RETURN . expr SEMICOLON
   53       | RETURN . SEMICOLON

    BRACKET_L         shift, and go to state 33
    SEMICOLON         shift, and go to state 141
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 142
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 94

   19 fundef: EXTERN . type ID BRACKET_L BRACKET_R SEMICOLON
   20       | EXTERN . type ID BRACKET_L param BRACKET_R SEMICOLON

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4

    type  go to state 143


state 95

   15 fundef: EXPORT . type ID BRACKET_L BRACKET_R funbody
   16       | EXPORT . type ID BRACKET_L param BRACKET_R funbody

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4

    type  go to state 144


state 96

   54 ifelse: IF . BRACKET_L expr BRACKET_R block ELSE block
   55       | IF . BRACKET_L expr BRACKET_R block
   56       | IF . BRACKET_L expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R ELSE CURLY_BRACKET_L CURLY_BRACKET_R
   57       | IF . BRACKET_L expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R ELSE block
   58       | IF . BRACKET_L expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   59       | IF . BRACKET_L expr BRACKET_R ELSE block

    BRACKET_L  shift, and go to state 145


state 97

   63 for: FOR . BRACKET_L type ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   64    | FOR . BRACKET_L type ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   65    | FOR . BRACKET_L type ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   66    | FOR . BRACKET_L type ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   67    | FOR . BRACKET_L type ID LET expr COMMA expr COMMA expr BRACKET_R stmts
   68    | FOR . BRACKET_L type ID LET expr COMMA expr BRACKET_R stmts

    BRACKET_L  shift, and go to state 146


state 98

   69 dowhile: DO . block WHILE BRACKET_L expr BRACKET_R SEMICOLON

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    CURLY_BRACKET_L   shift, and go to state 147
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    IF                shift, and go to state 96
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    stmt      go to state 148
    return    go to state 106
    ifelse    go to state 107
    block     go to state 149
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 99

   70 while: WHILE . BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R

    BRACKET_L  shift, and go to state 150


state 100

   71 varlet: ID .
   94 var: ID .
   95 funcall: ID . BRACKET_L exprs BRACKET_R
   96        | ID . BRACKET_L BRACKET_R

    BRACKET_L  shift, and go to state 68

    LET       reduce using rule 71 (varlet)
    $default  reduce using rule 94 (var)


state 101

   25 fundefs: fundef . fundefs
   26        | fundef .

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4
    EXTERN      shift, and go to state 94
    EXPORT      shift, and go to state 95

    $default  reduce using rule 26 (fundefs)

    fundef   go to state 101
    fundefs  go to state 151
    type     go to state 152


state 102

   31 funbody: CURLY_BRACKET_L fundefs . stmts CURLY_BRACKET_R
   37        | CURLY_BRACKET_L fundefs . CURLY_BRACKET_R

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    CURLY_BRACKET_R   shift, and go to state 153
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    IF                shift, and go to state 96
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    stmts     go to state 154
    stmt      go to state 105
    return    go to state 106
    ifelse    go to state 107
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 103

   29 funbody: CURLY_BRACKET_L vardecl . fundefs stmts CURLY_BRACKET_R
   30        | CURLY_BRACKET_L vardecl . stmts fundefs CURLY_BRACKET_R
   32        | CURLY_BRACKET_L vardecl . stmts CURLY_BRACKET_R
   33        | CURLY_BRACKET_L vardecl . fundefs CURLY_BRACKET_R
   35        | CURLY_BRACKET_L vardecl . CURLY_BRACKET_R
   39 vardecl: vardecl . type ID LET expr SEMICOLON
   41        | vardecl . type ID SEMICOLON

    INT_TYPE          shift, and go to state 1
    FLOAT_TYPE        shift, and go to state 2
    BOOL_TYPE         shift, and go to state 3
    VOID_TYPE         shift, and go to state 4
    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    CURLY_BRACKET_R   shift, and go to state 155
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    EXTERN            shift, and go to state 94
    EXPORT            shift, and go to state 95
    IF                shift, and go to state 96
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    fundef    go to state 101
    fundefs   go to state 156
    stmts     go to state 157
    stmt      go to state 105
    return    go to state 106
    ifelse    go to state 107
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50
    type      go to state 158


state 104

   34 funbody: CURLY_BRACKET_L stmts . fundefs CURLY_BRACKET_R
   36        | CURLY_BRACKET_L stmts . CURLY_BRACKET_R

    INT_TYPE         shift, and go to state 1
    FLOAT_TYPE       shift, and go to state 2
    BOOL_TYPE        shift, and go to state 3
    VOID_TYPE        shift, and go to state 4
    CURLY_BRACKET_R  shift, and go to state 159
    EXTERN           shift, and go to state 94
    EXPORT           shift, and go to state 95

    fundef   go to state 101
    fundefs  go to state 160
    type     go to state 152


state 105

   43 stmts: stmt . stmts
   44      | stmt .

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    IF                shift, and go to state 96
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    BRACKET_L         [reduce using rule 44 (stmts)]
    MINUS             [reduce using rule 44 (stmts)]
    NOT               [reduce using rule 44 (stmts)]
    TRUEVAL           [reduce using rule 44 (stmts)]
    FALSEVAL          [reduce using rule 44 (stmts)]
    RETURN            [reduce using rule 44 (stmts)]
    SQUARE_BRACKET_L  [reduce using rule 44 (stmts)]
    IF                [reduce using rule 44 (stmts)]
    FOR               [reduce using rule 44 (stmts)]
    DO                [reduce using rule 44 (stmts)]
    WHILE             [reduce using rule 44 (stmts)]
    NUM               [reduce using rule 44 (stmts)]
    FLOAT             [reduce using rule 44 (stmts)]
    ID                [reduce using rule 44 (stmts)]
    $default          reduce using rule 44 (stmts)

    stmts     go to state 161
    stmt      go to state 105
    return    go to state 106
    ifelse    go to state 107
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 106

   46 stmt: return .

    $default  reduce using rule 46 (stmt)


state 107

   47 stmt: ifelse .

    $default  reduce using rule 47 (stmt)


state 108

   45 stmt: assign .

    $default  reduce using rule 45 (stmt)


state 109

   48 stmt: for .

    $default  reduce using rule 48 (stmt)


state 110

   49 stmt: dowhile .

    $default  reduce using rule 49 (stmt)


state 111

   50 stmt: while .

    $default  reduce using rule 50 (stmt)


state 112

   62 assign: varlet . LET expr SEMICOLON

    LET  shift, and go to state 162


state 113

   51 stmt: expr . SEMICOLON
   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    SEMICOLON  shift, and go to state 163
    MINUS      shift, and go to state 71
    PLUS       shift, and go to state 72
    STAR       shift, and go to state 73
    SLASH      shift, and go to state 74
    PERCENT    shift, and go to state 75
    LE         shift, and go to state 76
    LT         shift, and go to state 77
    GE         shift, and go to state 78
    GT         shift, and go to state 79
    EQ         shift, and go to state 80
    NE         shift, and go to state 81
    OR         shift, and go to state 82
    AND        shift, and go to state 83


state 114

   17 fundef: type . ID BRACKET_L BRACKET_R funbody
   18       | type . ID BRACKET_L param BRACKET_R funbody
   40 vardecl: type . ID LET expr SEMICOLON
   42        | type . ID SEMICOLON

    ID  shift, and go to state 164


state 115

   18 fundef: type ID BRACKET_L param BRACKET_R funbody .

    $default  reduce using rule 18 (fundef)


state 116

   23 param: type ID COMMA . param

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4

    param  go to state 165
    type   go to state 32


state 117

   21 param: type ID ids . param
   22      | type ID ids .

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4

    $default  reduce using rule 22 (param)

    param  go to state 166
    type   go to state 32


state 118

   72 expr: BRACKET_L expr BRACKET_R .

    $default  reduce using rule 72 (expr)


state 119

   93 cast: BRACKET_L type BRACKET_R . expr

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 167
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 120

   99 exprs: expr COMMA . exprs

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 66
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    exprs     go to state 168
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 121

   97 arrexpr: SQUARE_BRACKET_L exprs SQUARE_BRACKET_R .

    $default  reduce using rule 97 (arrexpr)


state 122

   96 funcall: ID BRACKET_L BRACKET_R .

    $default  reduce using rule 96 (funcall)


state 123

   95 funcall: ID BRACKET_L exprs . BRACKET_R

    BRACKET_R  shift, and go to state 169


state 124

   12 globdef: type ID LET expr COMMA exprs . SEMICOLON

    SEMICOLON  shift, and go to state 170


state 125

   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   74     | expr MINUS expr .
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    STAR     shift, and go to state 73
    SLASH    shift, and go to state 74
    PERCENT  shift, and go to state 75

    $default  reduce using rule 74 (expr)


state 126

   73 expr: expr . PLUS expr
   73     | expr PLUS expr .
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    STAR     shift, and go to state 73
    SLASH    shift, and go to state 74
    PERCENT  shift, and go to state 75

    $default  reduce using rule 73 (expr)


state 127

   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   75     | expr STAR expr .
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    $default  reduce using rule 75 (expr)


state 128

   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   76     | expr SLASH expr .
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    $default  reduce using rule 76 (expr)


state 129

   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   77     | expr PERCENT expr .
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    $default  reduce using rule 77 (expr)


state 130

   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   78     | expr LE expr .
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    MINUS    shift, and go to state 71
    PLUS     shift, and go to state 72
    STAR     shift, and go to state 73
    SLASH    shift, and go to state 74
    PERCENT  shift, and go to state 75

    $default  reduce using rule 78 (expr)


state 131

   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   79     | expr LT expr .
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    MINUS    shift, and go to state 71
    PLUS     shift, and go to state 72
    STAR     shift, and go to state 73
    SLASH    shift, and go to state 74
    PERCENT  shift, and go to state 75

    $default  reduce using rule 79 (expr)


state 132

   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   80     | expr GE expr .
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    MINUS    shift, and go to state 71
    PLUS     shift, and go to state 72
    STAR     shift, and go to state 73
    SLASH    shift, and go to state 74
    PERCENT  shift, and go to state 75

    $default  reduce using rule 80 (expr)


state 133

   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   81     | expr GT expr .
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    MINUS    shift, and go to state 71
    PLUS     shift, and go to state 72
    STAR     shift, and go to state 73
    SLASH    shift, and go to state 74
    PERCENT  shift, and go to state 75

    $default  reduce using rule 81 (expr)


state 134

   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   82     | expr EQ expr .
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    MINUS    shift, and go to state 71
    PLUS     shift, and go to state 72
    STAR     shift, and go to state 73
    SLASH    shift, and go to state 74
    PERCENT  shift, and go to state 75
    LE       shift, and go to state 76
    LT       shift, and go to state 77
    GE       shift, and go to state 78
    GT       shift, and go to state 79

    $default  reduce using rule 82 (expr)


state 135

   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr
   85     | expr NE expr .

    MINUS    shift, and go to state 71
    PLUS     shift, and go to state 72
    STAR     shift, and go to state 73
    SLASH    shift, and go to state 74
    PERCENT  shift, and go to state 75
    LE       shift, and go to state 76
    LT       shift, and go to state 77
    GE       shift, and go to state 78
    GT       shift, and go to state 79

    $default  reduce using rule 85 (expr)


state 136

   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   83     | expr OR expr .
   84     | expr . AND expr
   85     | expr . NE expr

    MINUS    shift, and go to state 71
    PLUS     shift, and go to state 72
    STAR     shift, and go to state 73
    SLASH    shift, and go to state 74
    PERCENT  shift, and go to state 75
    LE       shift, and go to state 76
    LT       shift, and go to state 77
    GE       shift, and go to state 78
    GT       shift, and go to state 79
    EQ       shift, and go to state 80
    NE       shift, and go to state 81
    AND      shift, and go to state 83

    $default  reduce using rule 83 (expr)


state 137

   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   84     | expr AND expr .
   85     | expr . NE expr

    MINUS    shift, and go to state 71
    PLUS     shift, and go to state 72
    STAR     shift, and go to state 73
    SLASH    shift, and go to state 74
    PERCENT  shift, and go to state 75
    LE       shift, and go to state 76
    LT       shift, and go to state 77
    GE       shift, and go to state 78
    GT       shift, and go to state 79
    EQ       shift, and go to state 80
    NE       shift, and go to state 81

    $default  reduce using rule 84 (expr)


state 138

   20 fundef: EXTERN type ID BRACKET_L param BRACKET_R SEMICOLON .

    $default  reduce using rule 20 (fundef)


state 139

   16 fundef: EXPORT type ID BRACKET_L param BRACKET_R funbody .

    $default  reduce using rule 16 (fundef)


state 140

    9 globdef: EXPORT type ID LET expr COMMA exprs . SEMICOLON

    SEMICOLON  shift, and go to state 171


state 141

   53 return: RETURN SEMICOLON .

    $default  reduce using rule 53 (return)


state 142

   52 return: RETURN expr . SEMICOLON
   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    SEMICOLON  shift, and go to state 172
    MINUS      shift, and go to state 71
    PLUS       shift, and go to state 72
    STAR       shift, and go to state 73
    SLASH      shift, and go to state 74
    PERCENT    shift, and go to state 75
    LE         shift, and go to state 76
    LT         shift, and go to state 77
    GE         shift, and go to state 78
    GT         shift, and go to state 79
    EQ         shift, and go to state 80
    NE         shift, and go to state 81
    OR         shift, and go to state 82
    AND        shift, and go to state 83


state 143

   19 fundef: EXTERN type . ID BRACKET_L BRACKET_R SEMICOLON
   20       | EXTERN type . ID BRACKET_L param BRACKET_R SEMICOLON

    ID  shift, and go to state 173


state 144

   15 fundef: EXPORT type . ID BRACKET_L BRACKET_R funbody
   16       | EXPORT type . ID BRACKET_L param BRACKET_R funbody

    ID  shift, and go to state 174


state 145

   54 ifelse: IF BRACKET_L . expr BRACKET_R block ELSE block
   55       | IF BRACKET_L . expr BRACKET_R block
   56       | IF BRACKET_L . expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R ELSE CURLY_BRACKET_L CURLY_BRACKET_R
   57       | IF BRACKET_L . expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R ELSE block
   58       | IF BRACKET_L . expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   59       | IF BRACKET_L . expr BRACKET_R ELSE block

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 175
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 146

   63 for: FOR BRACKET_L . type ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   64    | FOR BRACKET_L . type ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   65    | FOR BRACKET_L . type ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   66    | FOR BRACKET_L . type ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   67    | FOR BRACKET_L . type ID LET expr COMMA expr COMMA expr BRACKET_R stmts
   68    | FOR BRACKET_L . type ID LET expr COMMA expr BRACKET_R stmts

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4

    type  go to state 176


state 147

   60 block: CURLY_BRACKET_L . stmts CURLY_BRACKET_R

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    IF                shift, and go to state 96
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    stmts     go to state 177
    stmt      go to state 105
    return    go to state 106
    ifelse    go to state 107
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 148

   61 block: stmt .

    $default  reduce using rule 61 (block)


state 149

   69 dowhile: DO block . WHILE BRACKET_L expr BRACKET_R SEMICOLON

    WHILE  shift, and go to state 178


state 150

   70 while: WHILE BRACKET_L . expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 179
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 151

   25 fundefs: fundef fundefs .

    $default  reduce using rule 25 (fundefs)


state 152

   17 fundef: type . ID BRACKET_L BRACKET_R funbody
   18       | type . ID BRACKET_L param BRACKET_R funbody

    ID  shift, and go to state 180


state 153

   37 funbody: CURLY_BRACKET_L fundefs CURLY_BRACKET_R .

    $default  reduce using rule 37 (funbody)


state 154

   31 funbody: CURLY_BRACKET_L fundefs stmts . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 181


state 155

   35 funbody: CURLY_BRACKET_L vardecl CURLY_BRACKET_R .

    $default  reduce using rule 35 (funbody)


state 156

   29 funbody: CURLY_BRACKET_L vardecl fundefs . stmts CURLY_BRACKET_R
   33        | CURLY_BRACKET_L vardecl fundefs . CURLY_BRACKET_R

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    CURLY_BRACKET_R   shift, and go to state 182
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    IF                shift, and go to state 96
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    stmts     go to state 183
    stmt      go to state 105
    return    go to state 106
    ifelse    go to state 107
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 157

   30 funbody: CURLY_BRACKET_L vardecl stmts . fundefs CURLY_BRACKET_R
   32        | CURLY_BRACKET_L vardecl stmts . CURLY_BRACKET_R

    INT_TYPE         shift, and go to state 1
    FLOAT_TYPE       shift, and go to state 2
    BOOL_TYPE        shift, and go to state 3
    VOID_TYPE        shift, and go to state 4
    CURLY_BRACKET_R  shift, and go to state 184
    EXTERN           shift, and go to state 94
    EXPORT           shift, and go to state 95

    fundef   go to state 101
    fundefs  go to state 185
    type     go to state 152


state 158

   17 fundef: type . ID BRACKET_L BRACKET_R funbody
   18       | type . ID BRACKET_L param BRACKET_R funbody
   39 vardecl: vardecl type . ID LET expr SEMICOLON
   41        | vardecl type . ID SEMICOLON

    ID  shift, and go to state 186


state 159

   36 funbody: CURLY_BRACKET_L stmts CURLY_BRACKET_R .

    $default  reduce using rule 36 (funbody)


state 160

   34 funbody: CURLY_BRACKET_L stmts fundefs . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 187


state 161

   43 stmts: stmt stmts .

    $default  reduce using rule 43 (stmts)


state 162

   62 assign: varlet LET . expr SEMICOLON

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 188
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 163

   51 stmt: expr SEMICOLON .

    $default  reduce using rule 51 (stmt)


state 164

   17 fundef: type ID . BRACKET_L BRACKET_R funbody
   18       | type ID . BRACKET_L param BRACKET_R funbody
   40 vardecl: type ID . LET expr SEMICOLON
   42        | type ID . SEMICOLON

    BRACKET_L  shift, and go to state 21
    SEMICOLON  shift, and go to state 189
    LET        shift, and go to state 190


state 165

   23 param: type ID COMMA param .

    $default  reduce using rule 23 (param)


state 166

   21 param: type ID ids param .

    $default  reduce using rule 21 (param)


state 167

   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr
   93 cast: BRACKET_L type BRACKET_R expr .

    MINUS    shift, and go to state 71
    PLUS     shift, and go to state 72
    STAR     shift, and go to state 73
    SLASH    shift, and go to state 74
    PERCENT  shift, and go to state 75
    LE       shift, and go to state 76
    LT       shift, and go to state 77
    GE       shift, and go to state 78
    GT       shift, and go to state 79
    EQ       shift, and go to state 80
    NE       shift, and go to state 81
    OR       shift, and go to state 82
    AND      shift, and go to state 83

    MINUS     [reduce using rule 93 (cast)]
    PLUS      [reduce using rule 93 (cast)]
    STAR      [reduce using rule 93 (cast)]
    SLASH     [reduce using rule 93 (cast)]
    PERCENT   [reduce using rule 93 (cast)]
    LE        [reduce using rule 93 (cast)]
    LT        [reduce using rule 93 (cast)]
    GE        [reduce using rule 93 (cast)]
    GT        [reduce using rule 93 (cast)]
    EQ        [reduce using rule 93 (cast)]
    NE        [reduce using rule 93 (cast)]
    OR        [reduce using rule 93 (cast)]
    AND       [reduce using rule 93 (cast)]
    $default  reduce using rule 93 (cast)


state 168

   99 exprs: expr COMMA exprs .

    $default  reduce using rule 99 (exprs)


state 169

   95 funcall: ID BRACKET_L exprs BRACKET_R .

    $default  reduce using rule 95 (funcall)


state 170

   12 globdef: type ID LET expr COMMA exprs SEMICOLON .

    $default  reduce using rule 12 (globdef)


state 171

    9 globdef: EXPORT type ID LET expr COMMA exprs SEMICOLON .

    $default  reduce using rule 9 (globdef)


state 172

   52 return: RETURN expr SEMICOLON .

    $default  reduce using rule 52 (return)


state 173

   19 fundef: EXTERN type ID . BRACKET_L BRACKET_R SEMICOLON
   20       | EXTERN type ID . BRACKET_L param BRACKET_R SEMICOLON

    BRACKET_L  shift, and go to state 24


state 174

   15 fundef: EXPORT type ID . BRACKET_L BRACKET_R funbody
   16       | EXPORT type ID . BRACKET_L param BRACKET_R funbody

    BRACKET_L  shift, and go to state 27


state 175

   54 ifelse: IF BRACKET_L expr . BRACKET_R block ELSE block
   55       | IF BRACKET_L expr . BRACKET_R block
   56       | IF BRACKET_L expr . BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R ELSE CURLY_BRACKET_L CURLY_BRACKET_R
   57       | IF BRACKET_L expr . BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R ELSE block
   58       | IF BRACKET_L expr . BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   59       | IF BRACKET_L expr . BRACKET_R ELSE block
   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    BRACKET_R  shift, and go to state 191
    MINUS      shift, and go to state 71
    PLUS       shift, and go to state 72
    STAR       shift, and go to state 73
    SLASH      shift, and go to state 74
    PERCENT    shift, and go to state 75
    LE         shift, and go to state 76
    LT         shift, and go to state 77
    GE         shift, and go to state 78
    GT         shift, and go to state 79
    EQ         shift, and go to state 80
    NE         shift, and go to state 81
    OR         shift, and go to state 82
    AND        shift, and go to state 83


state 176

   63 for: FOR BRACKET_L type . ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   64    | FOR BRACKET_L type . ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   65    | FOR BRACKET_L type . ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   66    | FOR BRACKET_L type . ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   67    | FOR BRACKET_L type . ID LET expr COMMA expr COMMA expr BRACKET_R stmts
   68    | FOR BRACKET_L type . ID LET expr COMMA expr BRACKET_R stmts

    ID  shift, and go to state 192


state 177

   60 block: CURLY_BRACKET_L stmts . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 193


state 178

   69 dowhile: DO block WHILE . BRACKET_L expr BRACKET_R SEMICOLON

    BRACKET_L  shift, and go to state 194


state 179

   70 while: WHILE BRACKET_L expr . BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    BRACKET_R  shift, and go to state 195
    MINUS      shift, and go to state 71
    PLUS       shift, and go to state 72
    STAR       shift, and go to state 73
    SLASH      shift, and go to state 74
    PERCENT    shift, and go to state 75
    LE         shift, and go to state 76
    LT         shift, and go to state 77
    GE         shift, and go to state 78
    GT         shift, and go to state 79
    EQ         shift, and go to state 80
    NE         shift, and go to state 81
    OR         shift, and go to state 82
    AND        shift, and go to state 83


state 180

   17 fundef: type ID . BRACKET_L BRACKET_R funbody
   18       | type ID . BRACKET_L param BRACKET_R funbody

    BRACKET_L  shift, and go to state 21


state 181

   31 funbody: CURLY_BRACKET_L fundefs stmts CURLY_BRACKET_R .

    $default  reduce using rule 31 (funbody)


state 182

   33 funbody: CURLY_BRACKET_L vardecl fundefs CURLY_BRACKET_R .

    $default  reduce using rule 33 (funbody)


state 183

   29 funbody: CURLY_BRACKET_L vardecl fundefs stmts . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 196


state 184

   32 funbody: CURLY_BRACKET_L vardecl stmts CURLY_BRACKET_R .

    $default  reduce using rule 32 (funbody)


state 185

   30 funbody: CURLY_BRACKET_L vardecl stmts fundefs . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 197


state 186

   17 fundef: type ID . BRACKET_L BRACKET_R funbody
   18       | type ID . BRACKET_L param BRACKET_R funbody
   39 vardecl: vardecl type ID . LET expr SEMICOLON
   41        | vardecl type ID . SEMICOLON

    BRACKET_L  shift, and go to state 21
    SEMICOLON  shift, and go to state 198
    LET        shift, and go to state 199


state 187

   34 funbody: CURLY_BRACKET_L stmts fundefs CURLY_BRACKET_R .

    $default  reduce using rule 34 (funbody)


state 188

   62 assign: varlet LET expr . SEMICOLON
   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    SEMICOLON  shift, and go to state 200
    MINUS      shift, and go to state 71
    PLUS       shift, and go to state 72
    STAR       shift, and go to state 73
    SLASH      shift, and go to state 74
    PERCENT    shift, and go to state 75
    LE         shift, and go to state 76
    LT         shift, and go to state 77
    GE         shift, and go to state 78
    GT         shift, and go to state 79
    EQ         shift, and go to state 80
    NE         shift, and go to state 81
    OR         shift, and go to state 82
    AND        shift, and go to state 83


state 189

   42 vardecl: type ID SEMICOLON .

    $default  reduce using rule 42 (vardecl)


state 190

   40 vardecl: type ID LET . expr SEMICOLON

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 201
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 191

   54 ifelse: IF BRACKET_L expr BRACKET_R . block ELSE block
   55       | IF BRACKET_L expr BRACKET_R . block
   56       | IF BRACKET_L expr BRACKET_R . CURLY_BRACKET_L CURLY_BRACKET_R ELSE CURLY_BRACKET_L CURLY_BRACKET_R
   57       | IF BRACKET_L expr BRACKET_R . CURLY_BRACKET_L CURLY_BRACKET_R ELSE block
   58       | IF BRACKET_L expr BRACKET_R . CURLY_BRACKET_L CURLY_BRACKET_R
   59       | IF BRACKET_L expr BRACKET_R . ELSE block

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    CURLY_BRACKET_L   shift, and go to state 202
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    IF                shift, and go to state 96
    ELSE              shift, and go to state 203
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    stmt      go to state 148
    return    go to state 106
    ifelse    go to state 107
    block     go to state 204
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 192

   63 for: FOR BRACKET_L type ID . LET expr COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   64    | FOR BRACKET_L type ID . LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   65    | FOR BRACKET_L type ID . LET expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   66    | FOR BRACKET_L type ID . LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   67    | FOR BRACKET_L type ID . LET expr COMMA expr COMMA expr BRACKET_R stmts
   68    | FOR BRACKET_L type ID . LET expr COMMA expr BRACKET_R stmts

    LET  shift, and go to state 205


state 193

   60 block: CURLY_BRACKET_L stmts CURLY_BRACKET_R .

    $default  reduce using rule 60 (block)


state 194

   69 dowhile: DO block WHILE BRACKET_L . expr BRACKET_R SEMICOLON

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 206
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 195

   70 while: WHILE BRACKET_L expr BRACKET_R . CURLY_BRACKET_L stmts CURLY_BRACKET_R

    CURLY_BRACKET_L  shift, and go to state 207


state 196

   29 funbody: CURLY_BRACKET_L vardecl fundefs stmts CURLY_BRACKET_R .

    $default  reduce using rule 29 (funbody)


state 197

   30 funbody: CURLY_BRACKET_L vardecl stmts fundefs CURLY_BRACKET_R .

    $default  reduce using rule 30 (funbody)


state 198

   41 vardecl: vardecl type ID SEMICOLON .

    $default  reduce using rule 41 (vardecl)


state 199

   39 vardecl: vardecl type ID LET . expr SEMICOLON

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 208
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 200

   62 assign: varlet LET expr SEMICOLON .

    $default  reduce using rule 62 (assign)


state 201

   40 vardecl: type ID LET expr . SEMICOLON
   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    SEMICOLON  shift, and go to state 209
    MINUS      shift, and go to state 71
    PLUS       shift, and go to state 72
    STAR       shift, and go to state 73
    SLASH      shift, and go to state 74
    PERCENT    shift, and go to state 75
    LE         shift, and go to state 76
    LT         shift, and go to state 77
    GE         shift, and go to state 78
    GT         shift, and go to state 79
    EQ         shift, and go to state 80
    NE         shift, and go to state 81
    OR         shift, and go to state 82
    AND        shift, and go to state 83


state 202

   56 ifelse: IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L . CURLY_BRACKET_R ELSE CURLY_BRACKET_L CURLY_BRACKET_R
   57       | IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L . CURLY_BRACKET_R ELSE block
   58       | IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L . CURLY_BRACKET_R
   60 block: CURLY_BRACKET_L . stmts CURLY_BRACKET_R

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    CURLY_BRACKET_R   shift, and go to state 210
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    IF                shift, and go to state 96
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    stmts     go to state 177
    stmt      go to state 105
    return    go to state 106
    ifelse    go to state 107
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 203

   59 ifelse: IF BRACKET_L expr BRACKET_R ELSE . block

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    CURLY_BRACKET_L   shift, and go to state 147
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    IF                shift, and go to state 96
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    stmt      go to state 148
    return    go to state 106
    ifelse    go to state 107
    block     go to state 211
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 204

   54 ifelse: IF BRACKET_L expr BRACKET_R block . ELSE block
   55       | IF BRACKET_L expr BRACKET_R block .

    ELSE  shift, and go to state 212

    ELSE      [reduce using rule 55 (ifelse)]
    $default  reduce using rule 55 (ifelse)


state 205

   63 for: FOR BRACKET_L type ID LET . expr COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   64    | FOR BRACKET_L type ID LET . expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   65    | FOR BRACKET_L type ID LET . expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   66    | FOR BRACKET_L type ID LET . expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   67    | FOR BRACKET_L type ID LET . expr COMMA expr COMMA expr BRACKET_R stmts
   68    | FOR BRACKET_L type ID LET . expr COMMA expr BRACKET_R stmts

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 213
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 206

   69 dowhile: DO block WHILE BRACKET_L expr . BRACKET_R SEMICOLON
   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    BRACKET_R  shift, and go to state 214
    MINUS      shift, and go to state 71
    PLUS       shift, and go to state 72
    STAR       shift, and go to state 73
    SLASH      shift, and go to state 74
    PERCENT    shift, and go to state 75
    LE         shift, and go to state 76
    LT         shift, and go to state 77
    GE         shift, and go to state 78
    GT         shift, and go to state 79
    EQ         shift, and go to state 80
    NE         shift, and go to state 81
    OR         shift, and go to state 82
    AND        shift, and go to state 83


state 207

   70 while: WHILE BRACKET_L expr BRACKET_R CURLY_BRACKET_L . stmts CURLY_BRACKET_R

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    IF                shift, and go to state 96
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    stmts     go to state 215
    stmt      go to state 105
    return    go to state 106
    ifelse    go to state 107
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 208

   39 vardecl: vardecl type ID LET expr . SEMICOLON
   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    SEMICOLON  shift, and go to state 216
    MINUS      shift, and go to state 71
    PLUS       shift, and go to state 72
    STAR       shift, and go to state 73
    SLASH      shift, and go to state 74
    PERCENT    shift, and go to state 75
    LE         shift, and go to state 76
    LT         shift, and go to state 77
    GE         shift, and go to state 78
    GT         shift, and go to state 79
    EQ         shift, and go to state 80
    NE         shift, and go to state 81
    OR         shift, and go to state 82
    AND        shift, and go to state 83


state 209

   40 vardecl: type ID LET expr SEMICOLON .

    $default  reduce using rule 40 (vardecl)


state 210

   56 ifelse: IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R . ELSE CURLY_BRACKET_L CURLY_BRACKET_R
   57       | IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R . ELSE block
   58       | IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R .

    ELSE  shift, and go to state 217

    ELSE      [reduce using rule 58 (ifelse)]
    $default  reduce using rule 58 (ifelse)


state 211

   59 ifelse: IF BRACKET_L expr BRACKET_R ELSE block .

    $default  reduce using rule 59 (ifelse)


state 212

   54 ifelse: IF BRACKET_L expr BRACKET_R block ELSE . block

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    CURLY_BRACKET_L   shift, and go to state 147
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    IF                shift, and go to state 96
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    stmt      go to state 148
    return    go to state 106
    ifelse    go to state 107
    block     go to state 218
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 213

   63 for: FOR BRACKET_L type ID LET expr . COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   64    | FOR BRACKET_L type ID LET expr . COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   65    | FOR BRACKET_L type ID LET expr . COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   66    | FOR BRACKET_L type ID LET expr . COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   67    | FOR BRACKET_L type ID LET expr . COMMA expr COMMA expr BRACKET_R stmts
   68    | FOR BRACKET_L type ID LET expr . COMMA expr BRACKET_R stmts
   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    COMMA    shift, and go to state 219
    MINUS    shift, and go to state 71
    PLUS     shift, and go to state 72
    STAR     shift, and go to state 73
    SLASH    shift, and go to state 74
    PERCENT  shift, and go to state 75
    LE       shift, and go to state 76
    LT       shift, and go to state 77
    GE       shift, and go to state 78
    GT       shift, and go to state 79
    EQ       shift, and go to state 80
    NE       shift, and go to state 81
    OR       shift, and go to state 82
    AND      shift, and go to state 83


state 214

   69 dowhile: DO block WHILE BRACKET_L expr BRACKET_R . SEMICOLON

    SEMICOLON  shift, and go to state 220


state 215

   70 while: WHILE BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 221


state 216

   39 vardecl: vardecl type ID LET expr SEMICOLON .

    $default  reduce using rule 39 (vardecl)


state 217

   56 ifelse: IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R ELSE . CURLY_BRACKET_L CURLY_BRACKET_R
   57       | IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R ELSE . block

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    CURLY_BRACKET_L   shift, and go to state 222
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    IF                shift, and go to state 96
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    stmt      go to state 148
    return    go to state 106
    ifelse    go to state 107
    block     go to state 223
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 218

   54 ifelse: IF BRACKET_L expr BRACKET_R block ELSE block .

    $default  reduce using rule 54 (ifelse)


state 219

   63 for: FOR BRACKET_L type ID LET expr COMMA . expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   64    | FOR BRACKET_L type ID LET expr COMMA . expr COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   65    | FOR BRACKET_L type ID LET expr COMMA . expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   66    | FOR BRACKET_L type ID LET expr COMMA . expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   67    | FOR BRACKET_L type ID LET expr COMMA . expr COMMA expr BRACKET_R stmts
   68    | FOR BRACKET_L type ID LET expr COMMA . expr BRACKET_R stmts

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 224
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 220

   69 dowhile: DO block WHILE BRACKET_L expr BRACKET_R SEMICOLON .

    $default  reduce using rule 69 (dowhile)


state 221

   70 while: WHILE BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R .

    $default  reduce using rule 70 (while)


state 222

   56 ifelse: IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R ELSE CURLY_BRACKET_L . CURLY_BRACKET_R
   60 block: CURLY_BRACKET_L . stmts CURLY_BRACKET_R

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    CURLY_BRACKET_R   shift, and go to state 225
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    IF                shift, and go to state 96
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    stmts     go to state 177
    stmt      go to state 105
    return    go to state 106
    ifelse    go to state 107
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 223

   57 ifelse: IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R ELSE block .

    $default  reduce using rule 57 (ifelse)


state 224

   63 for: FOR BRACKET_L type ID LET expr COMMA expr . BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   64    | FOR BRACKET_L type ID LET expr COMMA expr . COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   65    | FOR BRACKET_L type ID LET expr COMMA expr . BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   66    | FOR BRACKET_L type ID LET expr COMMA expr . COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   67    | FOR BRACKET_L type ID LET expr COMMA expr . COMMA expr BRACKET_R stmts
   68    | FOR BRACKET_L type ID LET expr COMMA expr . BRACKET_R stmts
   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    BRACKET_R  shift, and go to state 226
    COMMA      shift, and go to state 227
    MINUS      shift, and go to state 71
    PLUS       shift, and go to state 72
    STAR       shift, and go to state 73
    SLASH      shift, and go to state 74
    PERCENT    shift, and go to state 75
    LE         shift, and go to state 76
    LT         shift, and go to state 77
    GE         shift, and go to state 78
    GT         shift, and go to state 79
    EQ         shift, and go to state 80
    NE         shift, and go to state 81
    OR         shift, and go to state 82
    AND        shift, and go to state 83


state 225

   56 ifelse: IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R ELSE CURLY_BRACKET_L CURLY_BRACKET_R .

    $default  reduce using rule 56 (ifelse)


state 226

   63 for: FOR BRACKET_L type ID LET expr COMMA expr BRACKET_R . CURLY_BRACKET_L CURLY_BRACKET_R
   65    | FOR BRACKET_L type ID LET expr COMMA expr BRACKET_R . CURLY_BRACKET_L stmts CURLY_BRACKET_R
   68    | FOR BRACKET_L type ID LET expr COMMA expr BRACKET_R . stmts

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    CURLY_BRACKET_L   shift, and go to state 228
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    IF                shift, and go to state 96
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    stmts     go to state 229
    stmt      go to state 105
    return    go to state 106
    ifelse    go to state 107
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 227

   64 for: FOR BRACKET_L type ID LET expr COMMA expr COMMA . expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   66    | FOR BRACKET_L type ID LET expr COMMA expr COMMA . expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   67    | FOR BRACKET_L type ID LET expr COMMA expr COMMA . expr BRACKET_R stmts

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    SQUARE_BRACKET_L  shift, and go to state 38
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 41

    expr      go to state 230
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 228

   63 for: FOR BRACKET_L type ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_L . CURLY_BRACKET_R
   65    | FOR BRACKET_L type ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_L . stmts CURLY_BRACKET_R

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    CURLY_BRACKET_R   shift, and go to state 231
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    IF                shift, and go to state 96
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    stmts     go to state 232
    stmt      go to state 105
    return    go to state 106
    ifelse    go to state 107
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 229

   68 for: FOR BRACKET_L type ID LET expr COMMA expr BRACKET_R stmts .

    $default  reduce using rule 68 (for)


state 230

   64 for: FOR BRACKET_L type ID LET expr COMMA expr COMMA expr . BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   66    | FOR BRACKET_L type ID LET expr COMMA expr COMMA expr . BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   67    | FOR BRACKET_L type ID LET expr COMMA expr COMMA expr . BRACKET_R stmts
   73 expr: expr . PLUS expr
   74     | expr . MINUS expr
   75     | expr . STAR expr
   76     | expr . SLASH expr
   77     | expr . PERCENT expr
   78     | expr . LE expr
   79     | expr . LT expr
   80     | expr . GE expr
   81     | expr . GT expr
   82     | expr . EQ expr
   83     | expr . OR expr
   84     | expr . AND expr
   85     | expr . NE expr

    BRACKET_R  shift, and go to state 233
    MINUS      shift, and go to state 71
    PLUS       shift, and go to state 72
    STAR       shift, and go to state 73
    SLASH      shift, and go to state 74
    PERCENT    shift, and go to state 75
    LE         shift, and go to state 76
    LT         shift, and go to state 77
    GE         shift, and go to state 78
    GT         shift, and go to state 79
    EQ         shift, and go to state 80
    NE         shift, and go to state 81
    OR         shift, and go to state 82
    AND        shift, and go to state 83


state 231

   63 for: FOR BRACKET_L type ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R .

    $default  reduce using rule 63 (for)


state 232

   65 for: FOR BRACKET_L type ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 234


state 233

   64 for: FOR BRACKET_L type ID LET expr COMMA expr COMMA expr BRACKET_R . CURLY_BRACKET_L CURLY_BRACKET_R
   66    | FOR BRACKET_L type ID LET expr COMMA expr COMMA expr BRACKET_R . CURLY_BRACKET_L stmts CURLY_BRACKET_R
   67    | FOR BRACKET_L type ID LET expr COMMA expr COMMA expr BRACKET_R . stmts

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    CURLY_BRACKET_L   shift, and go to state 235
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    IF                shift, and go to state 96
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    stmts     go to state 236
    stmt      go to state 105
    return    go to state 106
    ifelse    go to state 107
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 234

   65 for: FOR BRACKET_L type ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R .

    $default  reduce using rule 65 (for)


state 235

   64 for: FOR BRACKET_L type ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L . CURLY_BRACKET_R
   66    | FOR BRACKET_L type ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L . stmts CURLY_BRACKET_R

    BRACKET_L         shift, and go to state 33
    MINUS             shift, and go to state 34
    NOT               shift, and go to state 35
    TRUEVAL           shift, and go to state 36
    FALSEVAL          shift, and go to state 37
    CURLY_BRACKET_R   shift, and go to state 237
    RETURN            shift, and go to state 93
    SQUARE_BRACKET_L  shift, and go to state 38
    IF                shift, and go to state 96
    FOR               shift, and go to state 97
    DO                shift, and go to state 98
    WHILE             shift, and go to state 99
    NUM               shift, and go to state 39
    FLOAT             shift, and go to state 40
    ID                shift, and go to state 100

    stmts     go to state 238
    stmt      go to state 105
    return    go to state 106
    ifelse    go to state 107
    assign    go to state 108
    for       go to state 109
    dowhile   go to state 110
    while     go to state 111
    varlet    go to state 112
    expr      go to state 113
    cast      go to state 43
    var       go to state 44
    funcall   go to state 45
    arrexpr   go to state 46
    constant  go to state 47
    floatval  go to state 48
    intval    go to state 49
    boolval   go to state 50


state 236

   67 for: FOR BRACKET_L type ID LET expr COMMA expr COMMA expr BRACKET_R stmts .

    $default  reduce using rule 67 (for)


state 237

   64 for: FOR BRACKET_L type ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R .

    $default  reduce using rule 64 (for)


state 238

   66 for: FOR BRACKET_L type ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 239


state 239

   66 for: FOR BRACKET_L type ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R .

    $default  reduce using rule 66 (for)
