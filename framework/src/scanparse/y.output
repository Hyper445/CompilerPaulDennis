Terminals which are not used

   NE
   INTTYPE
   FLOATTYPE
   BOOLTYPE


State 38 conflicts: 6 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decls

    2 decls: decl
    3      | decl decls

    4 fundef: type ID BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    5       | type ID BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    6       | type ID BRACKET_L BRACKET_R

    7 funbody: vardecl fundefs stmts
    8        | vardecl fundefs
    9        | vardecl stmts
   10        | fundefs stmts
   11        | vardecl
   12        | fundefs
   13        | stmts

   14 fundefs: fundef fundefs
   15        | fundef

   16 vardecl: vardecl type ID exprs expr SEMICOLON
   17        | type ID exprs expr SEMICOLON
   18        | type ID exprs SEMICOLON
   19        | type ID SEMICOLON

   20 param: ID type ids COMMA param
   21      | ID type ids
   22      | ID type

   23 ids: ID ids
   24    | ID

   25 stmts: stmt stmts
   26      | stmt

   27 stmt: assign

   28 assign: varlet LET expr SEMICOLON

   29 varlet: ID exprs

   30 expr: constant
   31     | ID exprs
   32     | BRACKET_L expr binop expr BRACKET_R

   33 exprs: expr
   34      | expr exprs

   35 constant: floatval
   36         | intval
   37         | boolval

   38 floatval: FLOAT

   39 intval: NUM

   40 boolval: TRUEVAL
   41        | FALSEVAL

   42 binop: PLUS
   43      | MINUS
   44      | STAR
   45      | SLASH
   46      | PERCENT
   47      | LE
   48      | LT
   49      | GE
   50      | GT
   51      | EQ
   52      | OR
   53      | AND

   54 decl: fundef

   55 type: INT_TYPE
   56     | FLOAT_TYPE
   57     | BOOL_TYPE


Terminals, with rules where they appear

$end (0) 0
error (256)
INT_TYPE (258) 55
FLOAT_TYPE (259) 56
BOOL_TYPE (260) 57
BRACKET_L (261) 4 5 6 32
BRACKET_R (262) 4 5 6 32
COMMA (263) 20
SEMICOLON (264) 16 17 18 19 28
MINUS (265) 43
PLUS (266) 42
STAR (267) 44
SLASH (268) 45
PERCENT (269) 46
LE (270) 47
LT (271) 48
GE (272) 49
GT (273) 50
EQ (274) 51
NE (275)
OR (276) 52
AND (277) 53
TRUEVAL (278) 40
FALSEVAL (279) 41
LET (280) 28
INTTYPE (281)
FLOATTYPE (282)
BOOLTYPE (283)
CURLY_BRACKET_L (284) 4 5
CURLY_BRACKET_R (285) 4 5
NUM (286) 39
FLOAT (287) 38
ID (288) 4 5 6 16 17 18 19 20 21 22 23 24 29 31


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
program (35)
    on left: 1, on right: 0
decls (36)
    on left: 2 3, on right: 1 3
fundef (37)
    on left: 4 5 6, on right: 14 15 54
funbody (38)
    on left: 7 8 9 10 11 12 13, on right: 4 5
fundefs (39)
    on left: 14 15, on right: 7 8 10 12 14
vardecl (40)
    on left: 16 17 18 19, on right: 7 8 9 11 16
param (41)
    on left: 20 21 22, on right: 4 20
ids (42)
    on left: 23 24, on right: 20 21 23
stmts (43)
    on left: 25 26, on right: 7 9 10 13 25
stmt (44)
    on left: 27, on right: 25 26
assign (45)
    on left: 28, on right: 27
varlet (46)
    on left: 29, on right: 28
expr (47)
    on left: 30 31 32, on right: 16 17 28 32 33 34
exprs (48)
    on left: 33 34, on right: 16 17 18 29 31 34
constant (49)
    on left: 35 36 37, on right: 30
floatval (50)
    on left: 38, on right: 35
intval (51)
    on left: 39, on right: 36
boolval (52)
    on left: 40 41, on right: 37
binop (53)
    on left: 42 43 44 45 46 47 48 49 50 51 52 53, on right: 32
decl (54)
    on left: 54, on right: 2 3
type (55)
    on left: 55 56 57, on right: 4 5 6 16 17 18 19 20 21 22


state 0

    0 $accept: . program $end

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3

    program  go to state 4
    decls    go to state 5
    fundef   go to state 6
    decl     go to state 7
    type     go to state 8


state 1

   55 type: INT_TYPE .

    $default  reduce using rule 55 (type)


state 2

   56 type: FLOAT_TYPE .

    $default  reduce using rule 56 (type)


state 3

   57 type: BOOL_TYPE .

    $default  reduce using rule 57 (type)


state 4

    0 $accept: program . $end

    $end  shift, and go to state 9


state 5

    1 program: decls .

    $default  reduce using rule 1 (program)


state 6

   54 decl: fundef .

    $default  reduce using rule 54 (decl)


state 7

    2 decls: decl .
    3      | decl . decls

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3

    $default  reduce using rule 2 (decls)

    decls   go to state 10
    fundef  go to state 6
    decl    go to state 7
    type    go to state 8


state 8

    4 fundef: type . ID BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    5       | type . ID BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    6       | type . ID BRACKET_L BRACKET_R

    ID  shift, and go to state 11


state 9

    0 $accept: program $end .

    $default  accept


state 10

    3 decls: decl decls .

    $default  reduce using rule 3 (decls)


state 11

    4 fundef: type ID . BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    5       | type ID . BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    6       | type ID . BRACKET_L BRACKET_R

    BRACKET_L  shift, and go to state 12


state 12

    4 fundef: type ID BRACKET_L . param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    5       | type ID BRACKET_L . BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    6       | type ID BRACKET_L . BRACKET_R

    BRACKET_R  shift, and go to state 13
    ID         shift, and go to state 14

    param  go to state 15


state 13

    5 fundef: type ID BRACKET_L BRACKET_R . CURLY_BRACKET_L funbody CURLY_BRACKET_R
    6       | type ID BRACKET_L BRACKET_R .

    CURLY_BRACKET_L  shift, and go to state 16

    $default  reduce using rule 6 (fundef)


state 14

   20 param: ID . type ids COMMA param
   21      | ID . type ids
   22      | ID . type

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3

    type  go to state 17


state 15

    4 fundef: type ID BRACKET_L param . BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R

    BRACKET_R  shift, and go to state 18


state 16

    5 fundef: type ID BRACKET_L BRACKET_R CURLY_BRACKET_L . funbody CURLY_BRACKET_R

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    ID          shift, and go to state 19

    fundef   go to state 20
    funbody  go to state 21
    fundefs  go to state 22
    vardecl  go to state 23
    stmts    go to state 24
    stmt     go to state 25
    assign   go to state 26
    varlet   go to state 27
    type     go to state 28


state 17

   20 param: ID type . ids COMMA param
   21      | ID type . ids
   22      | ID type .

    ID  shift, and go to state 29

    $default  reduce using rule 22 (param)

    ids  go to state 30


state 18

    4 fundef: type ID BRACKET_L param BRACKET_R . CURLY_BRACKET_L funbody CURLY_BRACKET_R

    CURLY_BRACKET_L  shift, and go to state 31


state 19

   29 varlet: ID . exprs

    BRACKET_L  shift, and go to state 32
    TRUEVAL    shift, and go to state 33
    FALSEVAL   shift, and go to state 34
    NUM        shift, and go to state 35
    FLOAT      shift, and go to state 36
    ID         shift, and go to state 37

    expr      go to state 38
    exprs     go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


state 20

   14 fundefs: fundef . fundefs
   15        | fundef .

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3

    $default  reduce using rule 15 (fundefs)

    fundef   go to state 20
    fundefs  go to state 44
    type     go to state 8


state 21

    5 fundef: type ID BRACKET_L BRACKET_R CURLY_BRACKET_L funbody . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 45


state 22

   10 funbody: fundefs . stmts
   12        | fundefs .

    ID  shift, and go to state 19

    $default  reduce using rule 12 (funbody)

    stmts   go to state 46
    stmt    go to state 25
    assign  go to state 26
    varlet  go to state 27


state 23

    7 funbody: vardecl . fundefs stmts
    8        | vardecl . fundefs
    9        | vardecl . stmts
   11        | vardecl .
   16 vardecl: vardecl . type ID exprs expr SEMICOLON

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    ID          shift, and go to state 19

    $default  reduce using rule 11 (funbody)

    fundef   go to state 20
    fundefs  go to state 47
    stmts    go to state 48
    stmt     go to state 25
    assign   go to state 26
    varlet   go to state 27
    type     go to state 49


state 24

   13 funbody: stmts .

    $default  reduce using rule 13 (funbody)


state 25

   25 stmts: stmt . stmts
   26      | stmt .

    ID  shift, and go to state 19

    $default  reduce using rule 26 (stmts)

    stmts   go to state 50
    stmt    go to state 25
    assign  go to state 26
    varlet  go to state 27


state 26

   27 stmt: assign .

    $default  reduce using rule 27 (stmt)


state 27

   28 assign: varlet . LET expr SEMICOLON

    LET  shift, and go to state 51


state 28

    4 fundef: type . ID BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    5       | type . ID BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    6       | type . ID BRACKET_L BRACKET_R
   17 vardecl: type . ID exprs expr SEMICOLON
   18        | type . ID exprs SEMICOLON
   19        | type . ID SEMICOLON

    ID  shift, and go to state 52


state 29

   23 ids: ID . ids
   24    | ID .

    ID  shift, and go to state 29

    $default  reduce using rule 24 (ids)

    ids  go to state 53


state 30

   20 param: ID type ids . COMMA param
   21      | ID type ids .

    COMMA  shift, and go to state 54

    $default  reduce using rule 21 (param)


state 31

    4 fundef: type ID BRACKET_L param BRACKET_R CURLY_BRACKET_L . funbody CURLY_BRACKET_R

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    ID          shift, and go to state 19

    fundef   go to state 20
    funbody  go to state 55
    fundefs  go to state 22
    vardecl  go to state 23
    stmts    go to state 24
    stmt     go to state 25
    assign   go to state 26
    varlet   go to state 27
    type     go to state 28


state 32

   32 expr: BRACKET_L . expr binop expr BRACKET_R

    BRACKET_L  shift, and go to state 32
    TRUEVAL    shift, and go to state 33
    FALSEVAL   shift, and go to state 34
    NUM        shift, and go to state 35
    FLOAT      shift, and go to state 36
    ID         shift, and go to state 37

    expr      go to state 56
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


state 33

   40 boolval: TRUEVAL .

    $default  reduce using rule 40 (boolval)


state 34

   41 boolval: FALSEVAL .

    $default  reduce using rule 41 (boolval)


state 35

   39 intval: NUM .

    $default  reduce using rule 39 (intval)


state 36

   38 floatval: FLOAT .

    $default  reduce using rule 38 (floatval)


state 37

   31 expr: ID . exprs

    BRACKET_L  shift, and go to state 32
    TRUEVAL    shift, and go to state 33
    FALSEVAL   shift, and go to state 34
    NUM        shift, and go to state 35
    FLOAT      shift, and go to state 36
    ID         shift, and go to state 37

    expr      go to state 38
    exprs     go to state 57
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


state 38

   33 exprs: expr .
   34      | expr . exprs

    BRACKET_L  shift, and go to state 32
    TRUEVAL    shift, and go to state 33
    FALSEVAL   shift, and go to state 34
    NUM        shift, and go to state 35
    FLOAT      shift, and go to state 36
    ID         shift, and go to state 37

    BRACKET_L  [reduce using rule 33 (exprs)]
    TRUEVAL    [reduce using rule 33 (exprs)]
    FALSEVAL   [reduce using rule 33 (exprs)]
    NUM        [reduce using rule 33 (exprs)]
    FLOAT      [reduce using rule 33 (exprs)]
    ID         [reduce using rule 33 (exprs)]
    $default   reduce using rule 33 (exprs)

    expr      go to state 38
    exprs     go to state 58
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


state 39

   29 varlet: ID exprs .

    $default  reduce using rule 29 (varlet)


state 40

   30 expr: constant .

    $default  reduce using rule 30 (expr)


state 41

   35 constant: floatval .

    $default  reduce using rule 35 (constant)


state 42

   36 constant: intval .

    $default  reduce using rule 36 (constant)


state 43

   37 constant: boolval .

    $default  reduce using rule 37 (constant)


state 44

   14 fundefs: fundef fundefs .

    $default  reduce using rule 14 (fundefs)


state 45

    5 fundef: type ID BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R .

    $default  reduce using rule 5 (fundef)


state 46

   10 funbody: fundefs stmts .

    $default  reduce using rule 10 (funbody)


state 47

    7 funbody: vardecl fundefs . stmts
    8        | vardecl fundefs .

    ID  shift, and go to state 19

    $default  reduce using rule 8 (funbody)

    stmts   go to state 59
    stmt    go to state 25
    assign  go to state 26
    varlet  go to state 27


state 48

    9 funbody: vardecl stmts .

    $default  reduce using rule 9 (funbody)


state 49

    4 fundef: type . ID BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    5       | type . ID BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    6       | type . ID BRACKET_L BRACKET_R
   16 vardecl: vardecl type . ID exprs expr SEMICOLON

    ID  shift, and go to state 60


state 50

   25 stmts: stmt stmts .

    $default  reduce using rule 25 (stmts)


state 51

   28 assign: varlet LET . expr SEMICOLON

    BRACKET_L  shift, and go to state 32
    TRUEVAL    shift, and go to state 33
    FALSEVAL   shift, and go to state 34
    NUM        shift, and go to state 35
    FLOAT      shift, and go to state 36
    ID         shift, and go to state 37

    expr      go to state 61
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


state 52

    4 fundef: type ID . BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    5       | type ID . BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    6       | type ID . BRACKET_L BRACKET_R
   17 vardecl: type ID . exprs expr SEMICOLON
   18        | type ID . exprs SEMICOLON
   19        | type ID . SEMICOLON

    BRACKET_L  shift, and go to state 62
    SEMICOLON  shift, and go to state 63
    TRUEVAL    shift, and go to state 33
    FALSEVAL   shift, and go to state 34
    NUM        shift, and go to state 35
    FLOAT      shift, and go to state 36
    ID         shift, and go to state 37

    expr      go to state 38
    exprs     go to state 64
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


state 53

   23 ids: ID ids .

    $default  reduce using rule 23 (ids)


state 54

   20 param: ID type ids COMMA . param

    ID  shift, and go to state 14

    param  go to state 65


state 55

    4 fundef: type ID BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 66


state 56

   32 expr: BRACKET_L expr . binop expr BRACKET_R

    MINUS    shift, and go to state 67
    PLUS     shift, and go to state 68
    STAR     shift, and go to state 69
    SLASH    shift, and go to state 70
    PERCENT  shift, and go to state 71
    LE       shift, and go to state 72
    LT       shift, and go to state 73
    GE       shift, and go to state 74
    GT       shift, and go to state 75
    EQ       shift, and go to state 76
    OR       shift, and go to state 77
    AND      shift, and go to state 78

    binop  go to state 79


state 57

   31 expr: ID exprs .

    $default  reduce using rule 31 (expr)


state 58

   34 exprs: expr exprs .

    $default  reduce using rule 34 (exprs)


state 59

    7 funbody: vardecl fundefs stmts .

    $default  reduce using rule 7 (funbody)


state 60

    4 fundef: type ID . BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    5       | type ID . BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    6       | type ID . BRACKET_L BRACKET_R
   16 vardecl: vardecl type ID . exprs expr SEMICOLON

    BRACKET_L  shift, and go to state 62
    TRUEVAL    shift, and go to state 33
    FALSEVAL   shift, and go to state 34
    NUM        shift, and go to state 35
    FLOAT      shift, and go to state 36
    ID         shift, and go to state 37

    expr      go to state 38
    exprs     go to state 80
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


state 61

   28 assign: varlet LET expr . SEMICOLON

    SEMICOLON  shift, and go to state 81


state 62

    4 fundef: type ID BRACKET_L . param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    5       | type ID BRACKET_L . BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
    6       | type ID BRACKET_L . BRACKET_R
   32 expr: BRACKET_L . expr binop expr BRACKET_R

    BRACKET_L  shift, and go to state 32
    BRACKET_R  shift, and go to state 13
    TRUEVAL    shift, and go to state 33
    FALSEVAL   shift, and go to state 34
    NUM        shift, and go to state 35
    FLOAT      shift, and go to state 36
    ID         shift, and go to state 82

    param     go to state 15
    expr      go to state 56
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


state 63

   19 vardecl: type ID SEMICOLON .

    $default  reduce using rule 19 (vardecl)


state 64

   17 vardecl: type ID exprs . expr SEMICOLON
   18        | type ID exprs . SEMICOLON

    BRACKET_L  shift, and go to state 32
    SEMICOLON  shift, and go to state 83
    TRUEVAL    shift, and go to state 33
    FALSEVAL   shift, and go to state 34
    NUM        shift, and go to state 35
    FLOAT      shift, and go to state 36
    ID         shift, and go to state 37

    expr      go to state 84
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


state 65

   20 param: ID type ids COMMA param .

    $default  reduce using rule 20 (param)


state 66

    4 fundef: type ID BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R .

    $default  reduce using rule 4 (fundef)


state 67

   43 binop: MINUS .

    $default  reduce using rule 43 (binop)


state 68

   42 binop: PLUS .

    $default  reduce using rule 42 (binop)


state 69

   44 binop: STAR .

    $default  reduce using rule 44 (binop)


state 70

   45 binop: SLASH .

    $default  reduce using rule 45 (binop)


state 71

   46 binop: PERCENT .

    $default  reduce using rule 46 (binop)


state 72

   47 binop: LE .

    $default  reduce using rule 47 (binop)


state 73

   48 binop: LT .

    $default  reduce using rule 48 (binop)


state 74

   49 binop: GE .

    $default  reduce using rule 49 (binop)


state 75

   50 binop: GT .

    $default  reduce using rule 50 (binop)


state 76

   51 binop: EQ .

    $default  reduce using rule 51 (binop)


state 77

   52 binop: OR .

    $default  reduce using rule 52 (binop)


state 78

   53 binop: AND .

    $default  reduce using rule 53 (binop)


state 79

   32 expr: BRACKET_L expr binop . expr BRACKET_R

    BRACKET_L  shift, and go to state 32
    TRUEVAL    shift, and go to state 33
    FALSEVAL   shift, and go to state 34
    NUM        shift, and go to state 35
    FLOAT      shift, and go to state 36
    ID         shift, and go to state 37

    expr      go to state 85
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


state 80

   16 vardecl: vardecl type ID exprs . expr SEMICOLON

    BRACKET_L  shift, and go to state 32
    TRUEVAL    shift, and go to state 33
    FALSEVAL   shift, and go to state 34
    NUM        shift, and go to state 35
    FLOAT      shift, and go to state 36
    ID         shift, and go to state 37

    expr      go to state 86
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


state 81

   28 assign: varlet LET expr SEMICOLON .

    $default  reduce using rule 28 (assign)


state 82

   20 param: ID . type ids COMMA param
   21      | ID . type ids
   22      | ID . type
   31 expr: ID . exprs

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    BRACKET_L   shift, and go to state 32
    TRUEVAL     shift, and go to state 33
    FALSEVAL    shift, and go to state 34
    NUM         shift, and go to state 35
    FLOAT       shift, and go to state 36
    ID          shift, and go to state 37

    expr      go to state 38
    exprs     go to state 57
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43
    type      go to state 17


state 83

   18 vardecl: type ID exprs SEMICOLON .

    $default  reduce using rule 18 (vardecl)


state 84

   17 vardecl: type ID exprs expr . SEMICOLON

    SEMICOLON  shift, and go to state 87


state 85

   32 expr: BRACKET_L expr binop expr . BRACKET_R

    BRACKET_R  shift, and go to state 88


state 86

   16 vardecl: vardecl type ID exprs expr . SEMICOLON

    SEMICOLON  shift, and go to state 89


state 87

   17 vardecl: type ID exprs expr SEMICOLON .

    $default  reduce using rule 17 (vardecl)


state 88

   32 expr: BRACKET_L expr binop expr BRACKET_R .

    $default  reduce using rule 32 (expr)


state 89

   16 vardecl: vardecl type ID exprs expr SEMICOLON .

    $default  reduce using rule 16 (vardecl)
